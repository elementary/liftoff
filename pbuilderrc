HOOKDIR="/usr/lib/liftoff/hooks"
CACHEDIR="/var/cache/liftoff"

# apt-cache-ng URL e.g. http://X.X.X.X:3142
export http_proxy=""

# Outside connections
USENETWORK=yes

# Threaded decompression
COMPRESSPROG=pixz

BUILDPLACE=/var/cache/liftoff-build/

USEPROC=yes
USEDEVPTS=yes
USEDEVFS=no

EXTRAPACKAGES="apt-utils eatmydata"

# Remove potentially dangerous or undesirable packages like lilo
REMOVEPACKAGES="lilo"

# Make debconf not interact with user
export DEBIAN_FRONTEND="noninteractive"
DEBEMAIL="builds@elementary.io"
DEBFULLNAME="elementary Builds"

# For pbuilder debuild (sudo -E keeps the environment as-is)
BUILDSOURCEROOTCMD="fakeroot"
PBUILDERROOTCMD="sudo -E"

PBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends-aptitude"

# Command-line option passed on to dpkg-buildpackage.
DEBBUILDOPTS=""

# APT configuration files directory
APTCONFDIR=""

BINDMOUNTS=""

# the username and ID used by pbuilder, inside chroot. Needs fakeroot, really
BUILDUSERID=1234
BUILDUSERNAME=pbuilder

# Set the debootstrap variant to 'buildd' type.
DEBOOTSTRAPOPTS[0]='--variant=buildd'
# or work around bug in debootstrap 3.0.0 (314858)
# unset DEBOOTSTRAPOPTS

# Set the PATH to use inside pbuilder:
# default is "/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"
export PATH="/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"

# SHELL variable is used inside pbuilder by commands like 'su';
# and they need sane values
export SHELL=/bin/bash

# The name of debootstrap command.
if [ "${ARCH}" = "armhf" ] ; then
	DEBOOTSTRAP="/usr/sbin/qemu-debootstrap"
else
	DEBOOTSTRAP="debootstrap"
fi

# Default file extension for pkgname-logfile
PKGNAME_LOGFILE_EXTENSION="_$(dpkg --print-architecture).log"

# Always run with --pkgname-logfile option, and create
# a logfile named after the package name.
PKGNAME_LOGFILE="yes"

# Codenames for Debian suites according to their alias.
# Update these when needed.
UNSTABLE_CODENAME="sid"
TESTING_CODENAME="stretch"
STABLE_CODENAME="jessie"

# List of Debian suites.
DEBIAN_SUITES=($UNSTABLE_CODENAME $TESTING_CODENAME $STABLE_CODENAME
    "unstable" "testing" "stable")

# List of Ubuntu suites. Update these when needed.
UBUNTU_SUITES=("precise" "trusty" "xenial" "bionic")

# Mirrors
if [ "${ARCH}" != 'i386' ] && [ "${ARCH}" != 'amd64' ]; then
    DEBIAN_MIRROR="ftp.us.debian.org/debian"
    UBUNTU_MIRROR="ports.ubuntu.com/ubuntu-ports"
else
    DEBIAN_MIRROR="nyc1.mirrors.digitalocean.com/debian"
    UBUNTU_MIRROR="us.archive.ubuntu.com/ubuntu"
fi

# Optionally change Debian release states in $DIST to their names.
case "$DIST" in
    unstable) DIST="$UNSTABLE_CODENAME";;
    testing) DIST="$TESTING_CODENAME";;
    stable) DIST="$STABLE_CODENAME";;
esac

NAME="$DIST"
if [ -n "${ARCH}" ]; then
    NAME="$NAME-$ARCH"
    DEBOOTSTRAPOPTS=("--arch" "$ARCH" "${DEBOOTSTRAPOPTS[@]}")
fi
BASETGZ="$CACHEDIR/$NAME-base.tgz"
# Optionally, set BASEPATH (and not BASETGZ) if using cowbuilder
# BASEPATH="$CACHEDIR/$NAME/base.cow/"

DISTRIBUTION="$DIST"

#BUILDRESULT=""$CACHEDIR"/$NAME/result/"

# Blank disables .deb caching
APTCACHE=""

if $(echo ${DEBIAN_SUITES[@]} | grep -q $DIST); then
    # Debian configuration
    MIRRORSITE="http://$DEBIAN_MIRROR"
    COMPONENTS="main contrib non-free"
    OTHERMIRROR=""
    DEBOOTSTRAPOPTS=("--keyring=/etc/apt/trusted.gpg" "--keyring=/usr/share/keyrings/debian-archive-keyring.gpg" "${DEBOOTSTRAPOPTS[@]}")

elif $(echo ${UBUNTU_SUITES[@]} | grep -q $DIST); then
    # Ubuntu configuration
    MIRRORSITE="http://$UBUNTU_MIRROR"
    COMPONENTS="main universe multiverse"
    OTHERMIRROR="deb http://$UBUNTU_MIRROR $DIST-security $COMPONENTS|deb http://$UBUNTU_MIRROR $DIST-updates $COMPONENTS"
    DEBOOTSTRAPOPTS=("--keyring=/etc/apt/trusted.gpg" "--keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg" "${DEBOOTSTRAPOPTS[@]}")

else
    echo "Unknown distribution: $DIST"
    exit 1
fi

# Internal repository
INTERNAL_REPO="deb [trusted=yes] file:///home/cody/freight-repo $DIST main"
INTERNAL_REPO_MOUNTS="/home/cody/freight-repo"
ENABLE_INTERNAL_REPO=false

if [ "$ENABLE_INTERNAL_REPO" == "true" ] ;  then
    OTHERMIRROR="$OTHERMIRROR|$INTERNAL_REPO"
    BINDMOUNTS="$BINDMOUNTS $INTERNAL_REPO_MOUNTS"
fi

# External repository
EXTERNAL_REPO="deb [trusted=yes] http://192.168.1.114 $DIST main"
ENABLE_EXTERNAL_REPO=false

if [ "$ENABLE_EXTERNAL_REPO" == "true" ] ;  then
    OTHERMIRROR="$OTHERMIRROR|$EXTERNAL_REPO"
fi

# ppa:elementary-os/os-patches
OS_PATCHES="deb [trusted=yes] http://ppa.launchpad.net/elementary-os/os-patches/ubuntu $DIST main"

# ppa:elementary-os/os-patches
STABLE_PPA="deb [trusted=yes] http://ppa.launchpad.net/elementary-os/stable/ubuntu $DIST main"

# ppa:elementary-os/daily
DAILY_PPA="deb [trusted=yes] http://ppa.launchpad.net/elementary-os/daily/ubuntu $DIST main"

# ppa:gophers/archive
GO_PPA="deb [trusted=yes] http://ppa.launchpad.net/gophers/archive/ubuntu $DIST main"

# https://github.com/nodesource/distributions
NODE_REPO="deb [trusted=yes] http://deb.nodesource.com/node_8.x $DIST main"

if [ "$DIST" == "trusty" ] || [ "$DIST" == "xenial" ] || [ "$DIST" == "bionic" ] ; then
    OTHERMIRROR="$OTHERMIRROR|$OS_PATCHES|$STABLE_PPA|$GO_PPA|$NODE_REPO"
    EXTRAPACKAGES="$EXTRAPACKAGES elementary-os-overlay"
fi
